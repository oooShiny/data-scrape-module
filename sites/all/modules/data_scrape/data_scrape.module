<?php

/**
 * Implements hook_permission().
 */
function data_scrape_permission() {
  return array(
    'Refresh Data' => array(
      'title' => t('Refresh League Data'),
      'description' => t('User can access the Data Refresh button that will
      scrape any new data from their ESPN league.'),
    ),
    'Scrape Games' => array(
      'title' => t('Scrape Game Data'),
      'description' => t('User can access the Game Data button that will
      scrape all game data from their ESPN league schedule page(s).'),
    ),
    'Scrap Players' => array(
      'title' => t('Scrape Player Data'),
      'description' => t('User can access the Player Data button that will
      scrape all player data from their ESPN league games.'),
    ),
  );
}

/**
 *
 */
/**
 * Implements hook_theme().
 */
function data_scrape_theme($existing, $type, $theme, $path) {
  $theme = array();
  $theme['data_scrape'] = array(
    'template' => 'data-scrape',
    'variables' => array(),
  );
  return $theme;

}

/*
 * The form that initiates the scraping of the league schedules to get the
 * game nodes for a league.
 */
function data_scrape_game_form($form, &$form_state) {
  // Get ESPN league ID from current (league) node.
  $args = arg();
  $node = node_load($args[1]);
  $league = $node->field_espn_league_id['und'][0]['value'];
  $form = array();

  $form['league'] = array(
    '#type' => 'hidden',
    '#value' => $league,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update Stats'),
  );

  return $form;
}


/**
 * Add a submit handler/function to the form.
 */

function data_scrape_game_form_submit($form, &$form_state)
{
  // get years to scrape from node id of selected group
  //TODO: store year the league was established to save us some scraping
  $args = arg();
  $node = node_load($args[1]);
  $league = $form['league']['#value'];
  $years = get_league_years($league);

  // go through each year and scrape the schedule
  foreach($years as $year) {
    $standings = data_scrape_get_schedule($league, $year, $node->group_group['und'][0]['value']);
    update_teams($league, $year);
  }
  drupal_set_message('Game Database Updated!');
}

/**
 * Form for choosing two teams to do a matchup analysis that will be displayed
 * in a block on the league homepage.
 */
function data_scrape_matchups_form($form, &$form_state) {
  $form = array();
  // Get all the teams for this league so we can build select drop downs.
  $args = arg();
  $node = node_load($args[1]);
  $league = $node->field_espn_league_id['und'][0]['value'];
  $teams = get_teams_from_league_id($league);
  $team_array = array();
  foreach($teams as $team) {
    $team_array[$team->nid] = $team->title;
  }

  // Show data if we've got the league ID (because we'll have the team IDs too).
  if (!empty($form_state['values']['league'])) {
    // Bring in reinforcements to handle the matchup logic.
    module_load_include('inc', 'data_scrape', 'data_scrape.matchups');
    $result = matchup_builder($form_state['values']['team1'], $form_state['values']['team2'], $form_state['values']['league']);

    // Display the form in case the user wants to pick different teams.
    $form['team1'] = array(
      '#type' => 'select',
      '#title' => t('First Team'),
      '#options' => $team_array,
    );
    $form['team2'] = array(
      '#type' => 'select',
      '#title' => t('Second Team'),
      '#options' => $team_array,
    );
    $form['league'] = array(
      '#type' => 'hidden',
      '#value' => $league,
    );
    $form['submit'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="matchup-submit"><button class="btn waves-effect waves-light cyan darken-2" type="submit" name="action"><i class="material-icons">send</i></button></div>',
    );

    // Display the form data from the previous form submission, because that's
    // why we're here, right?

    $data = format_results($result);
    $display = theme('data_scrape', $data);

    $form['submission'] = array(
      '#markup' => $display,
    );
  }
  else {
    // There's no league ID submitted yet, so show the form.
    $form['team1'] = array(
      '#type' => 'select',
      '#title' => t('First Team'),
      '#options' => $team_array,
    );
    $form['team2'] = array(
      '#type' => 'select',
      '#title' => t('Second Team'),
      '#options' => $team_array,
    );
    $form['league'] = array(
      '#type' => 'hidden',
      '#value' => $league,
    );
    $form['submit'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="matchup-submit"><button class="btn waves-effect waves-light cyan darken-2" type="submit" name="action"><i class="material-icons">send</i></button></div>',
    );
  }

  return $form;
}

/**
 * Add a submit handler/function to the form.
 */
function data_scrape_matchups_form_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
}

/**
 * Implements hook_block_info().
 */
function data_scrape_block_info() {
  $blocks['team_schedule'] = array(
    // The name that will appear in the block list.
    'info' => t('Team Schedule Block'),
    // Default setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  $blocks['matchup_builder'] = array(
    'info' => t('Matchup Builder Block'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  $blocks['scrape_schedule'] = array(
    'info' => t('Scrape Schedule Block'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function data_scrape_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    // Matchup Builder Block View
    case 'matchup_builder':
      $form = drupal_get_form('data_scrape_matchups_form');
      $block['subject'] = t('Matchup Builder');
      $block['content'] = '<h3>Team Matchup Analyzer</h3>';
      $block['content'] .= drupal_render($form);
      $block['content'] .= '<div style="display: block; clear: both"></div>';

      break;

    // Team Schedule Block View
    case 'team_schedule':
      $block['subject'] = t('Team Schedule');

      $team = node_load(arg(1));
      $league = node_load($team->og_group_ref['und'][0]['target_id']);
      $league_id = $league->field_espn_league_id['und'][0]['safe_value'];
      $league_og = $team->og_group_ref['und'][0]['target_id'];
      $team_id = $team->field_team_id['und'][0]['value'];

      $block['content'] = '<table><thead><tr><th>Week</th><th>Home</th><th>Score</th><th>Away</th></tr></thead><tbody>';
      $gamelist = get_games($team_id, $league_id, $league_og);
      foreach($gamelist as $season => $weeklist) {
        $block['content'] .= '<tr colspan=4><td>'.$season.'</td></tr>';
        ksort($weeklist);
        foreach($weeklist as $week => $game) {
          $block['content'] .= '<tr class="'.$game['result'].'"><td>'.$week.'</td>';
          $block['content'] .= '<td>'.$game['home'].'</td>';
          $block['content'] .= '<td>'.$game['homescore'].' - '.$game['awayscore'].'</td>';
          $block['content'] .= '<td>'.$game['away'].'</td></tr>';
        }
      }
      $block['content'] .= '</tbody></table>';
      break;

    // Scraping Schedule Button Block View
    case 'scrape_schedule':
      $block['subject'] = '';
      $block['content'] = 'Data not up-to-date?';
      $block['content'] .= drupal_render(drupal_get_form('data_scrape_game_form'));
      break;
  }
  return $block;
}


/*
 * Get all games that a team has participated in.
 * $team_id: the ESPN team ID
 * $league_id: the ESPN league ID
 * $league_og: the Drupal organic group node ID
 */
function get_games($team_id, $league_id, $league_og) {
  $games = array();
  $teams = array();
  // get all of the teams in the league
  $league_teams = db_query("SELECT n.title, og.gid, t.field_team_id_value FROM node n
    LEFT JOIN og_membership og ON og.etid = n.nid
    LEFT JOIN field_data_field_team_id t ON t.entity_id = n.nid
    WHERE n.type = 'team'
    AND og.gid = :gid", array(':gid' => $league_og));

  foreach($league_teams as $team) {
    $teams[$team->field_team_id_value] = $team->title;
  }

  // get home games
  $homegames = db_select('games', 'g')
    ->fields('g')
    ->condition('g.league', $league_id,'=')
    ->condition('g.home', $team_id, '=')
    ->orderBy('season', 'DESC')
    ->orderBy('week', 'ASC')
    ->execute();

  // get away games
  $awaygames = db_select('games', 'g')
    ->fields('g')
    ->condition('g.league', $league_id,'=')
    ->condition('g.away', $team_id, '=')
    ->orderBy('season', 'DESC')
    ->orderBy('week', 'ASC')
    ->execute();

  // add home games to the master list
  foreach($homegames as $game) {
    $games[$game->season][$game->week]['home'] = $teams[$game->home].' ('.$game->home.')';
    $games[$game->season][$game->week]['homescore'] = $game->homescore;
    $games[$game->season][$game->week]['away'] = $teams[$game->away].' ('.$game->away.')';
    $games[$game->season][$game->week]['awayscore'] = $game->awayscore;

    if($game->homescore > $game->awayscore) {
      $games[$game->season][$game->week]['result'] = 'win';
    }
    elseif($game->homescore < $game->awayscore) {
      $games[$game->season][$game->week]['result'] = 'loss';
    }
    else {
      $games[$game->season][$game->week]['result'] = 'tie';
    }
  }

  // add away games to the master list
  foreach($awaygames as $game) {
    $games[$game->season][$game->week]['home'] = $teams[$game->home].' ('.$game->home.')';
    $games[$game->season][$game->week]['homescore'] = $game->homescore;
    $games[$game->season][$game->week]['away'] = $teams[$game->away].' ('.$game->away.')';
    $games[$game->season][$game->week]['awayscore'] = $game->awayscore;

    if($game->homescore < $game->awayscore) {
      $games[$game->season][$game->week]['result'] = 'win';
    }
    elseif($game->homescore > $game->awayscore) {
      $games[$game->season][$game->week]['result'] = 'loss';
    }
    else {
      $games[$game->season][$game->week]['result'] = 'tie';
    }

  }

  return $games;
}

/**
 *  Implements hook_node_postinsert().
 *  Creates associated team nodes by scraping the ESPN site when a league node
 *  is created.
 */
function data_scrape_node_postinsert($node) {
  if ( $node->type == 'league' ) {
    // Get the ESPN league id from the node.
    $leagueid = $node->field_espn_league_id['und'][0]['value'];
    // Get years from homepage select box so we can get historical data.
    $years = get_league_years($leagueid);
    // If the years check returns an error then the league is set to private.
    if ($years[0] == 'ERROR') {
      $options = array('query' => array('league' => $leagueid));
      drupal_goto('private-leagues', $options);
    }
    else {
      create_teams($node, $years, $leagueid);
    }

  }
}

/**
 *  The main function that brings everything together. Creates teams from ESPN
 *  data.
 */
function create_teams($node, $years, $leagueid) {
  // get ESPN league ID from League node

  $db_league = db_select('SELECT league from games WHERE league = :id LIMIT 1', array(':id' => $leagueid));
  $db_league = db_select('games', 'g')
    ->fields('g')
    ->condition('g.league', $leagueid,'=')
    ->range(0,1)
    ->execute()
    ->fetchField();
  if ($db_league === TRUE) {
    $league_exists = TRUE;
  }
  // scrape history from ESPN pages
  $team_history = scrape_history($leagueid, $years);
  // scrape the current standings for each team
  $team_standings = scrape_current($leagueid);

  // let's create some nodes!
  foreach($team_standings as $id => $team){

    $team_node = new stdClass(); // Create a new node object
    $team_node->type = "team";
    node_object_prepare($team_node); // Set some default values

    $team_node->title    = $team['name'];
    $team_node->language = LANGUAGE_NONE;

    global $user;

    $team_node->uid = $user->uid; // UID of the author of the node

    // populate fields with content from ESPN scrape
    $team_node->field_team_owner['und'][0]['value'] = $team['owner'];
    $team_node->field_team_id['und'][0]['value'] = $id;
    $team_node->field_team_wins['und'][0]['value'] = $team['wins'];
    $team_node->field_team_losses['und'][0]['value'] = $team['losses'];
    $team_node->field_team_ties['und'][0]['value'] = $team['ties'];
    $team_node->field_team_points_for['und'][0]['value'] = $team['pf'];
    $team_node->field_team_points_against['und'][0]['value'] = $team['pa'];
    $team_node->field_team_streak['und'][0]['value'] = $team['streak'];

    if($team_node = node_submit($team_node)) { // Prepare node for saving
      node_save($team_node);
      module_load_include('inc', 'entity', 'includes/entity.controller');
      foreach($team_history as $old_year => $this_team){
          $values = array(
            'field_name' => 'field_historical_stats',
            'field_historical_year' => array(
              LANGUAGE_NONE => array(array('value' => $old_year)),
            ),
            'field_historical_owner' => array(
              LANGUAGE_NONE => array(array('value' => $this_team[$id]['team_owner'])),
            ),
            'field_historical_team_name' => array(
              LANGUAGE_NONE => array(array('value' => $this_team[$id]['team_name'])),
            ),
            'field_historical_wins' => array(
              LANGUAGE_NONE => array(array('value' => $this_team[$id]['wins'])),
            ),
            'field_historical_losses' => array(
              LANGUAGE_NONE => array(array('value' => $this_team[$id]['losses'])),
            ),
            'field_historical_ties' => array(
              LANGUAGE_NONE => array(array('value' => $this_team[$id]['ties'])),
            ),
            'field_historical_points_for' => array(
              LANGUAGE_NONE => array(array('value' => $this_team[$id]['pf'])),
            ),
            'field_historical_points_against' => array(
              LANGUAGE_NONE => array(array('value' => $this_team[$id]['pa'])),
            ),
          );
          $entity = entity_create('field_collection_item', $values);
          $entity->setHostEntity('node', $team_node);
          $entity->save();
        }

      assign_to_group($team_node, $node);
    }

  }
}

function update_teams($league_id, $standings) {
  // Get teams in league.
  $teams = get_teams_from_league_id($league_id);
  // Get latest standings.
  $standings = scrape_current($league_id);
  // Update information.
  foreach ($teams as $team_obj) {
    // Making things easier to read further down.
    $team = entity_metadata_wrapper('node', $team_obj);
    $id = $team->field_team_id->value();
    // Make sure this team still exists.
    if ($standings[$id]) {
      // Updating Team info (name, owner).
      $team->title->set($standings[$id]['name']);
      $team->field_team_owner->set($standings[$id]['owner']);
      // Updating record.
      $team->field_team_wins->set($standings[$id]['wins']);
      $team->field_team_losses->set($standings[$id]['losses']);
      $team->field_team_ties->set($standings[$id]['ties']);
      // Updating other stats.
      $team->field_team_points_for->set($standings[$id]['pf']);
      $team->field_team_points_against->set($standings[$id]['pa']);
      $team->field_team_streak->set($standings[$id]['streak']);
      // Updating Milestones
      $team->field_team_most_points->set($high_score_text);
      $team->field_team_least_points->set($low_score_text);
      $team->field_team_biggest_win->set($big_win_text);
      $team->field_team_biggest_loss->set($big_loss_text);

      // Updating historical standings.
      $fc = $team->field_historical_stats->value();
      foreach ($fc as $fc_item) {
        $item = entity_metadata_wrapper('field_collection_item', $fc_item);
        $fc_year = $item->field_historical_year->value();
        $this_year = date('Y');
        if ($fc_year == $this_year) {
          $item->field_historical_team_name->set($standings[$id]['name']);
          $item->field_historical_owner->set($standings[$id]['owner']);

          $item->field_historical_wins->set($standings[$id]['wins']);
          $item->field_historical_losses->set($standings[$id]['losses']);
          $item->field_historical_ties->set($standings[$id]['ties']);
//TODO: Change PF and PA from integers to decimals so we don't have to round here.
          $item->field_historical_points_for->set(round($standings[$id]['pf']));
          $item->field_historical_points_against->set(round($standings[$id]['pa']));
          $item->save();
        }
      }
      // Save the changes.
      $team->save();
    }
  }

}

/**
 *
 * Get current year standings for the league.
 *
 * @param $leagueid
 *
 * @return array
 */
function scrape_current($leagueid) {
  $standings = array();
  $url = 'http://games.espn.go.com/ffl/standings?leagueId=' . $leagueid;
  // scrape HTML from ESPN league standings page
  $html = drupal_http_request($url);
  // split string on each standings table
  $tables = preg_split( '/<table (.*) class="tableBody" /', $html->data );
  foreach($tables as $table) {
    $rows = array();
    if(strpos( $table, 'DOCTYPE HTML PUBLIC' ) !== FALSE) {
      // skip this one
    }elseif(strpos($table, '<td colspan="6">') !== FALSE) {
      // grab all rows from the table
      $rows = preg_split('/<tr class="tableBody" bgcolor=#(.{6})>/', $table);
      $colspan = 6;
    }else {
      $rows    = preg_split('/<tr class="(odd|even)Row bodyCopy sortableRow">/', $table);
      $colspan = 7;
    }
    if ($rows) {
      foreach($rows as $row){
        if(strpos( $row, 'tableHead' ) !== FALSE) {
          // skip header row
        }else{
          if($colspan == 6){
            // break apart HTML to get pertinent information
            $data = preg_split('/<a title="/', $row);
            $split = explode('"', $data[1]);
            // format data
            $team_link = explode('&amp;', $split[2]);
            $team_id = explode('=', $team_link[1]);
            $id = $team_id[1];
            $team_info = explode('(', $split[0]);
            $wins = explode('>', $split[7]);
            $losses = explode('>', $split[9]);
            $ties = explode('>', $split[11]);
            // store team info in standings array
            $standings[$id]['owner'] = rtrim(array_pop($team_info), ')');

            $standings[$id]['name'] = rtrim(implode('(', $team_info));
            $standings[$id]['wins'] = rtrim($wins[1], '</td' );
            $standings[$id]['losses'] = rtrim($losses[1], '</td' );
            $standings[$id]['ties'] = rtrim($ties[1], '</td' );
          }elseif($colspan == 7) {
            $data = preg_split('/<td align="right" class="sortable(.{2,6})">/', $row);
            $team_link = explode('&amp;', $data[0]);
            $team_id = explode('=', $team_link[1]);
            $id = $team_id[1];
            $standings[$id]['pf'] = rtrim($data[1], '</td>');
            $standings[$id]['pa'] = rtrim($data[2], '</td>');
            $streak = explode('>', $data[6]);
            $standings[$id]['streak'] = rtrim($streak[1], '</td');
          }
        }
      }
    }

  }
return $standings;
}

/*
 * Scrape ESPN Final Standings pages for each year the league has been active
 * (which we get from the get_league_years() function). Returns an array with
 * all of the historical data for us with which we can create field collections
 * for each team.
 */

function scrape_history($leagueid, $years) {
	$history = array();
	// Go through each year and get final standings.
	foreach($years as $year) {
		$url = 'http://games.espn.go.com/ffl/tools/finalstandings?leagueId=' . $leagueid . '&seasonId=' . $year;
		// scrape HTML from ESPN league standings page
		$html = drupal_http_request( $url );
		// pull out the standings table from the HTML code
		$break = preg_split( '/<table .* id="finalRankingsTable" .* /', $html->data );
		// pull out each row of the table, save in array
		$table = preg_split( '/<tr class="sortableRow .*>/', $break[1] );

		foreach ( $table as $row ) {
			if ( strpos( $row, 'FINAL LEAGUE STANDINGS' ) !== FALSE ) {
				// skip first row (table column headings)
			} else {
				$cells = preg_split( '/<td .*?>/', $row );
				$team_info = explode( '"', $cells[2] );
                  $team_name = explode( '(', $team_info[1] );
                  $team_owner = rtrim( $team_name[1], ')' );
                  $team_id = explode( '&amp;', $team_info[3] );
                    $id = substr( $team_id[1], 7 );

              $history[ $year ][$id]['team_name'] = htmlentities($team_name[0], ENT_IGNORE, "UTF-8");
              $history[ $year ][$id]['team_owner'] = htmlentities($team_owner, ENT_IGNORE, "UTF-8");

				$record                     = explode( '-', $cells[5] );
				$history[ $year ][$id]['wins']   = ltrim( $record[4], '>' );
				$history[ $year ][$id]['losses'] = str_replace( "</td>\n", '', $record[5] );
				$history[ $year ][$id]['ties']   = ( $record[6] ? str_replace( "</td>\n", '', $record[6] ) : '0' );

				$history[ $year ][$id]['pf'] = str_replace( "</td>\n", '', $cells[6] );
				$history[ $year ][$id]['pa'] = str_replace( "</td>\n", '', $cells[7] );
			}
		}
	}
	return $history;
}

/*
 * Get the yearly league champions
 */
function scrape_league_champions($league_id, $years) {
  $history = array();
  // Get the individual teams info for this league.
  $teams = get_teams_from_league_id($league_id);
  // Go through each year and get final standings.
  foreach($years as $year) {
    $url = 'http://games.espn.go.com/ffl/tools/finalstandings?leagueId=' . $league_id . '&seasonId=' . $year;
    // scrape HTML from ESPN league standings page
    $html = drupal_http_request( $url );
    // pull out the standings table from the HTML code
    $break = preg_split( '/<table .* id="finalRankingsTable" .* /', $html->data );
    // pull out each row of the table, save in array
    $table = preg_split( '/<tr class="sortableRow .*>/', $break[1] );

    foreach ( $table as $row ) {
      if ( strpos( $row, 'FINAL LEAGUE STANDINGS' ) !== FALSE ) {
        // skip first row (table column headings)
      } else {
        $cells = preg_split( '/<td .*?>/', $row );
        if (strpos($cells[1], '<!-- 01 (for sorting) -->')) {
          // This is the champion, save this info.
          $team_info = explode( '"', $cells[2] );
          $team_id = explode( '&amp;', $team_info[3] );
          $id = substr( $team_id[1], 7 );

//          $history['champion'][$year] = $teams[$id];
        }
      }
    }
  }
  return $history;
}

/*
 * Scrape ESPN schedule page to get games
 */
function data_scrape_get_schedule($league_id, $year, $og_id) {
  // Check to see if we already have data for this season.
  $check = db_select('games', 'g')
    ->fields('g', array('week'))
    ->condition('g.league', $league_id, '=')
    ->condition('g.season', $year, '=')
    ->orderBy('g.week', 'DESC')
    ->range(0,1)
    ->execute()
    ->fetchField();

  $curr_week = 0;
  if ($check !== FALSE) {
    $curr_week = $check;
  }

  $games = array();
  $url = 'http://games.espn.go.com/ffl/schedule?leagueId='.$league_id.'&seasonId='.$year;
  $html = drupal_http_request($url);
  $break = preg_split( '/<table/', $html->data );
  $rows = preg_split('/<tr/', $break[2]);
  $schedule = array();
  foreach($rows as $row) {
    if(strpos($row, '#1d7225')) {
      $week_array = explode('</a>', $row);
      $week = rtrim($week_array[1], "</td>\n</tr>\n");
      // need to handle regular season different than playoffs
      if(strpos($week, 'WEEK') !== FALSE) {
        $week = ltrim($week, 'WEEK ');
      }
      else {
        $playoff_week = explode(' ', $week);
        $week = 'P' . $playoff_week[1];
      }
    }
    if((strpos($row, '#f2f2e8') !== FALSE) || (strpos($row, '#f8f8f2') !== FALSE )) {
     $game_array = explode('<td', $row);
      // make sure the week isn't TBD
      if(isset($game_array[2]) !== FALSE) {
        // get home team id
        $home_link = explode('&amp;', $game_array[1]);
        if (isset($home_link[1])) {
          $home_id = ltrim($home_link[1], 'teamId=');
        }
        // get away team id
        $away_link = explode('&amp;', $game_array[4]);
        if (isset($away_link[1])) {
          $away_id = ltrim($away_link[1], 'teamId=');
        }
        // get week
        $score_link = explode('&', $game_array[6]);

        // get score, if there is one
        if (strpos($score_link[1], 'nbsp;') === FALSE
            && strpos($score_link[2], 'Preview') === FALSE
            && strpos($score_link[5], 'Box') === FALSE
        ) {
          $score_rough = explode('-', $score_link[5]);
          $home_score  = ltrim($score_rough[0], 'version=quick">');
          $away_score  = rtrim($score_rough[1], "</a></NOBR></td>\n</tr>\n");
          $away_score  = rtrim($away_score, '*');
        }
        else {
          $home_score = 0;
          $away_score = 0;
        }
        // Insert or Update data depending on if we found it in the DB already
        if ($curr_week < $week) {
          // Insert game data into the database directly.
          $nid = db_insert('games')
            ->fields(array(
              'home'      => $home_id,
              'away'      => $away_id,
              'homescore' => $home_score,
              'awayscore' => $away_score,
              'league'    => $league_id,
              'season'    => $year,
              'week'      => $week
            ))
            ->execute();
        }
        else {
          // Update game data in the database directly.
          db_update('games')
          ->fields(array(
            'homescore' => $home_score,
            'awayscore' => $away_score,
          ))
          ->condition('home', $home_id, '=')
          ->condition('away', $away_id, '=')
          ->condition('league', $league_id, '=')
          ->condition('season', $year, '=')
          ->condition('week', $week, '=')
          ->execute();
        }
      }
//      create_game_node($league_id, $year, $week, $home_id, $away_id, $home_score, $away_score, $og_id);
    }
  }
}

/*
 * {CURRENTLY UNUSED} Save each game as an actual node, which will let us save more
 * information about it.
 */
function create_game_node($league, $year, $week, $home, $away, $hscore, $ascore, $og_id) {
  $game_node = new stdClass(); // Create a new node object
  $game_node->type = "game";
  node_object_prepare($game_node); // Set some default values

  $game_node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled

  global $user;

  $game_node->uid = $user->uid; // UID of the author of the node

  // populate fields with content from ESPN scrape
  $game_node->field_game_league['und'][0]['target_id'] = $og_id;
//  $game_node->field_game_league['und'][0]['value'] = $league;
  $game_node->field_game_home_team['und'][0]['target_id'] = $home;
  $game_node->field_game_away_team['und'][0]['target_id'] = $away;
  $game_node->field_game_home_score['und'][0]['value'] = $hscore;
  $game_node->field_game_away_score['und'][0]['value'] = $ascore;
  $game_node->field_game_season['und'][0]['value'] = $year;

  node_save($game_node);
  assign_to_group($game_node, $og_id);
}

/*
 * Scrape matchup pages to get player/position data. This data will be used for
 * determining positional output per team/owner.
 */
function data_scrape_get_players($game_id) {
  //TODO: Figure out if we can grab all player/position data per game
}

/*
 * Scrape ESPN homepage for the Year selection dropdown. This will give us
 * an array with the years the league has been active.
 */
function get_league_years($league_id) {
  $url = 'http://games.espn.go.com/ffl/leagueoffice?leagueId='.$league_id;
  // scrape HTML from ESPN league homepage
  $html = drupal_http_request($url);
  // get the select box with prior years in it
  $select = preg_split('/<select/', $html->data);
  $years = array();
  // If we can find the select box, go through each one to get the years.
  if(array_key_exists(1, $select)){
    $options = preg_split('/<option/', $select[1]);
    unset($options[0]);
    foreach($options AS $year) {
      $split = preg_split('/value="/', $year);
      $years[] = substr($split[1], 0, 4);
    }
  } else {
    // Can't find the select box (league not active for current season or first season).
    // Redo the scrape for last year instead.
    $last_year = date('Y') - 1;
    $url .= '&seasonId=' . $last_year;
    $html = drupal_http_request($url);
    $select = preg_split('/<select/', $html->data);
    // Check again to make sure league isn't just set to private.
    if(array_key_exists(1, $select)){
      $options = preg_split('/<option/', $select[1]);
      unset($options[0]);
      foreach ($options AS $year) {
        $split   = preg_split('/value="/', $year);
        $years[] = substr($split[1], 0, 4);
      }
    }
    else {
      // Check to see if this is the inaugural season, and not a private league.
      $history_url = 'http://games.espn.go.com/ffl/history?leagueId=' . $league_id;
      $history_html = drupal_http_request($history_url);
      // History page will give a message saying it's the inaugural season.
      $inaugural = preg_split('/inaugural/', $history_html->data);
      if (array_key_exists(1, $inaugural)) {
        // Add current year to years array.
        $years[] = date('Y');
      }
      else {
        // At this point, we're pretty sure it's a private league. Set the error.
        $years[0] = 'ERROR';
        $years[1] = 'Your league is set to private, which means we can\'t scrape the data.';
      }
    }
  }
  return $years;
}

/*
 * Assign a Team node to its corresponding League (Organic Group)
 */
function assign_to_group($node, $gid) {
  $values = array('entity_type' => 'node', 'entity' => $node, 'field_name' => 'og_group_ref');
  $result = og_group('node', $gid, $values);
}

/*
 * Get team info from league ID
 */
function get_teams_from_league_id($league_id) {
  global $user;
  if ($user->uid !== '1') {
    // get $league_nid from $league_id
    $league_node = db_select('field_revision_field_espn_league_id', 'espn');
    $league_node->join('node', 'n', 'n.vid = espn.revision_id');
    $league_node->fields('espn', array('entity_id'))
                ->condition('espn.field_espn_league_id_value', $league_id, '=')
                ->condition('n.uid', $user->uid, '=')
                ->range(0,1);
  }
  else {
    // get $league_nid from $league_id
    $league_node = db_select('field_revision_field_espn_league_id', 'espn');
    $league_node->join('node', 'n', 'n.vid = espn.revision_id');
    $league_node->fields('espn', array('entity_id'))
                ->condition('espn.field_espn_league_id_value', $league_id, '=')
                ->range(0,1);
  }

  $result = $league_node->execute();

  $league_nid = $result->fetchField();

  // find nodes where gid = $league_nid
  $team_result = db_select('og_membership', 'og')
    ->fields('og', array('etid'))
    ->condition('og.gid', $league_nid, '=')
    ->execute();
  foreach($team_result as $team) {
    $node = node_load($team->etid);
    if ($node != FALSE && $node->type == 'team') {
      $teams[] = $node;
    }
  }

  return $teams;
}

/**
 * implementing hook_form_alter
 *
 */
function data_scrape_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'node_delete_confirm') {
    // add an extra submit function to execute, make sure this is the last
    // function that will be executed. Maybe there are other module that also
    // add #submit to add changes the form.
    $form['#submit'][] = 'data_scrape_submit';
  }

  if ('commissioner_report_node_form' == $form_id) {
    // Create a new submit function to the node form.
    $form['#submit'][] = 'data_scrape_commish_report_submit';
  }

}


/**
 * function is called after a node is deleted. Put the logic here
 *
 */
function data_scrape_submit() {
  $args = arg();
  $node = node_load($args[1]);
  drupal_goto('dashboard');

}

/*
 * Custom submit form to set the selected OG as the argument for any views
 * blocks that have been added to the Commish Report node.
 */
function data_scrape_commish_report_submit($form, &$form_state) {
  $og = $form_state['values']['og_group_ref']['und'][0]['target_id'];
  foreach($form_state['values']['field_report_content']['und'] as $block) {
    if (isset($block['field_cr_standings_block']['und'][0]['vargs'])) {
      $block['entity']->field_cr_standings_block['und'][0]['vargs'] = $og;
    }
    elseif (isset($block['field_power_rankings']['und'][0]['vargs'])) {
      $block['entity']->field_power_rankings['und'][0]['vargs'] = $og;
    }
  }
}

function data_scrape_menu() {

  $items['update-games'] = array(
    'page callback' => 'data_scrape_update_games_form',
    'access arguments' => TRUE,
  );
  $items['espn'] = array(
    'page callback' => 'espn_login',
    'access arguments' => TRUE,
  );
  $items['draft-scrape'] = array(
    'page callback' => 'data_scrape_view_draft_form',
    'access arguments' => TRUE,
  );
  return $items;
}


function data_scrape_view_draft_form() {
  return drupal_get_form('data_scrape_draft_form');
}
/**
 * Implements hook_form().
 */
function data_scrape_draft_form($node, &$form_state) {
  $league = '242286';
  $form = array();

  $form['league'] = array(
    '#type' => 'hidden',
    '#value' => $league,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Scrape Draft Info'),
  );

  return $form;
}

function data_scrape_draft_form_submit($form, &$form_state) {
  module_load_include('inc', 'data_scrape', 'data_scrape.draft');

  $league = $form['league']['#value'];
  scrape_draft_results($league);

}

/**
 * Provide a form to manually input scores for any games that can't be scraped.
 */
function data_scrape_update_games_form($form, &$form_state) {
  // Get ESPN league ID from current (league) node.
//  $args = arg();
//  $node = node_load($args[1]);
//  $league = $node->field_espn_league_id['und'][0]['value'];
  $league = '313479';
  $form = array();

  $get_games = 'SELECT * FROM games WHERE league = ' . $league;
  $games = db_query($get_games);
  $teams = get_teams_from_league_id($league);
  $team = Array();
  foreach ($teams as $t) {
    $team[$t->field_team_id['und'][0]['value']] = $t->title;
  }
  ?>
  <table>
  <thead>
    <tr>
      <th>Season</th>
      <th>Week</th>
      <th>Home</th>
      <th colspan="2">Score</th>
      <th>Away</th>
    </tr>
  </thead>
  <tbody>
<?php
  foreach ($games as $game) {

    $form[$game->id]['home'] = array(
      '#type' => 'textfield',
      '#title' => $team[$game->home],
      '#default_value' => $game->homescore,
    );
    $form[$game->id]['away'] = array(
      '#type' => 'textfield',
      '#title' => $team[$game->away],
      '#default_value' => $game->awayscore,
    );
    $form[$game->id]['league'] = array(
      '#type' => 'hidden',
      '#value' => $league,
    );
    $form[$game->id]['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save Game'),
    );
  }

  return $form;

}
